---
- name: Build Execution Environments
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    environments_dir: "{{ playbook_dir }}/environments"

  pre_tasks:
    # --- System/User Setup ---
    - name: Ensure subuid mapping for user
      become: true
      ansible.builtin.lineinfile:
        path: /etc/subuid
        regexp: "^{{ lookup('env', 'USER') }}:"
        line: "{{ lookup('env', 'USER') }}:100000:65536"
        create: yes
        mode: '0644'
      failed_when: false

    - name: Ensure subgid mapping for user
      become: true
      ansible.builtin.lineinfile:
        path: /etc/subgid
        regexp: "^{{ lookup('env', 'USER') }}:"
        line: "{{ lookup('env', 'USER') }}:100000:65536"
        create: yes
        mode: '0644'
      failed_when: false

    - name: Ensure newuidmap is setuid root
      become: true
      ansible.builtin.file:
        path: /usr/bin/newuidmap
        mode: '4755'
      failed_when: false

    - name: Ensure newgidmap is setuid root
      become: true
      ansible.builtin.file:
        path: /usr/bin/newgidmap
        mode: '4755'
      failed_when: false

    - name: Ensure shadow-utils is installed (provides newuidmap/newgidmap)
      become: true
      ansible.builtin.dnf:
        name: shadow-utils
        state: present
      failed_when: false

    - name: Ensure subuid/subgid ranges for current user
      become: true
      ansible.builtin.command: usermod --add-subuids 100000-165535 {{ lookup('env', 'USER') }}
      changed_when: false
      failed_when: false

    - name: Ensure subgid range for user
      become: true
      ansible.builtin.command: usermod --add-subgids 100000-165535 {{ lookup('env', 'USER') }}
      changed_when: false
      failed_when: false

    - name: Add user to podman and docker groups if not already a member
      become: true
      ansible.builtin.user:
        name: "{{ lookup('env', 'USER') }}"
        groups: podman,docker
        append: true
      failed_when: false

    - name: Ensure user.max_user_namespaces is set high enough
      become: true
      ansible.builtin.sysctl:
        name: user.max_user_namespaces
        value: '28633'
        sysctl_set: yes
        state: present
        reload: yes
      failed_when: false

    # --- Dependency Checks ---
    - name: Stop and disable firewalld for playbook run
      become: true
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: false
      failed_when: false

    - name: Check SELinux status
      ansible.builtin.command: getenforce
      register: selinux_status
      changed_when: false
      failed_when: false

    - name: Warn if SELinux is enforcing
      ansible.builtin.debug:
        msg: "WARNING: SELinux is Enforcing. This may cause permission issues. Consider setting to Permissive for troubleshooting."
      when: selinux_status.stdout is defined and selinux_status.stdout == 'Enforcing'

    - name: Ensure python3.12 and python3.12-pip are installed (dnf)
      become: true
      ansible.builtin.dnf:
        name:
          - python3.12
          - python3.12-pip
        state: present
      failed_when: false

    - name: Ensure 'alternatives' is installed (dnf)
      become: true
      ansible.builtin.dnf:
        name: alternatives
        state: present
      failed_when: false

    - name: Set python3.12 as the default python3 using alternatives
      become: true
      community.general.alternatives:
        name: python3
        path: /usr/bin/python3.12
      failed_when: false

    - name: Add alias for python3 to python3.12 in user's .bashrc
      ansible.builtin.lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
        line: "alias python3=python3.12"
        create: true
        mode: '0644'
      failed_when: false

    - name: Ensure python3.12 is enabled for current session
      ansible.builtin.shell: |
        export PATH="/usr/bin:$PATH"
        hash -r
        python3 --version
      register: python3_version_check
      changed_when: false
      failed_when: false

    # --- Ansible/Builder Checks ---
    - name: Check if ansible-playbook is in PATH
      ansible.builtin.command: which ansible-playbook
      register: ansible_playbook_path
      changed_when: false
      failed_when: false

    - name: Check if ansible-builder is in PATH
      ansible.builtin.command: which ansible-builder
      register: ansible_builder_path
      changed_when: false
      failed_when: false

    - name: Install ansible if not present (dnf)
      become: true
      ansible.builtin.dnf:
        name: ansible
        state: present
      when: ansible_playbook_path.rc != 0
      failed_when: false

    - name: Install ansible if not present (pip fallback)
      ansible.builtin.pip:
        name: ansible
        extra_args: --upgrade --ignore-installed --user
      when: ansible_playbook_path.rc != 0
      failed_when: false

    - name: Install Ansible development packages via pip
      ansible.builtin.pip:
        name:
          - ansible-core
          - ansible-runner
          - ansible-lint
          - ansible-builder
          - ansible-navigator
          - ansible-pylibssh
          - ansible-compat
        extra_args: --user --upgrade --ignore-installed
        executable: pip3

    - name: Ensure ansible-builder is installed system-wide (dnf)
      become: true
      ansible.builtin.dnf:
        name: ansible-builder
        state: present
      failed_when: false

    - name: Ensure ansible-dev-tools is installed system-wide (dnf)
      become: true
      ansible.builtin.dnf:
        name: ansible-dev-tools
        state: present
      failed_when: false

    - name: Install ansible-builder if not present (pip fallback)
      ansible.builtin.pip:
        name: ansible-builder
        extra_args: --user
      when: ansible_builder_path.rc != 0
      failed_when: false

    - name: Ensure ~/.local/bin is in PATH for ansible-builder
      ansible.builtin.shell: |
        export PATH="$HOME/.local/bin:$PATH"
        echo $PATH
      register: update_path_result
      changed_when: false
      when: ansible_builder_path.rc != 0
      failed_when: false

    - name: Fail if ansible-playbook is not found
      ansible.builtin.fail:
        msg: "ansible-playbook is not in PATH. Please install Ansible or fix your PATH."
      when: ansible_playbook_path.rc != 0

    - name: Fail if ansible-builder is not found
      ansible.builtin.fail:
        msg: "ansible-builder is not in PATH. Please install ansible-builder or fix your PATH."
      when: ansible_builder_path.rc != 0

    # --- Repo Checks ---
    - name: Check if required Ansible Automation Platform repo is enabled
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        subscription-manager repos --list-enabled | grep ansible-automation-platform-2.5-for-rhel-9-x86_64-rpms
      register: aap_repo_enabled
      changed_when: false
      failed_when: false

    - name: Enable Ansible Automation Platform repo if not enabled
      become: true
      ansible.builtin.command: subscription-manager repos --enable=ansible-automation-platform-2.5-for-rhel-9-x86_64-rpms
      when: aap_repo_enabled.rc != 0
      changed_when: aap_repo_enabled.rc != 0
      failed_when: false

    # --- Secret Prompts and Storage (CLI only) ---
    - name: Detect if running in Automation Platform WebUI
      set_fact:
        running_in_webui: "{{ (ansible_env.AWX_TASK_ID is defined) or (ansible_env.ANSIBLE_CONTROLLER_HOST is defined) }}"

    - name: Prompt for Red Hat credentials token
      ansible.builtin.vars_prompt:
        name: rh_credentials_token
        prompt: "Enter your Red Hat Automation Hub token"
        private: yes
      when: not running_in_webui

    - name: Prompt for Red Hat CDN username
      ansible.builtin.vars_prompt:
        name: redhat_cdn_username
        prompt: "Enter your Red Hat CDN username"
        private: no
      when: not running_in_webui

    - name: Prompt for Red Hat CDN password
      ansible.builtin.vars_prompt:
        name: redhat_cdn_password
        prompt: "Enter your Red Hat CDN password"
        private: yes
      when: not running_in_webui

    - name: Ensure ~/.ansible/conf directory exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ansible/conf"
        state: directory
        mode: '0700'
      when: not running_in_webui

    - name: Write secrets to ~/.ansible/conf/env.conf
      ansible.builtin.copy:
        dest: "{{ lookup('env', 'HOME') }}/.ansible/conf/env.conf"
        content: |
          RH_CREDENTIALS_TOKEN={{ rh_credentials_token }}
          REDHAT_CDN_USERNAME={{ redhat_cdn_username }}
          REDHAT_CDN_PASSWORD={{ redhat_cdn_password }}
        mode: '0600'
      when: not running_in_webui

  tasks:
    # --- Environment Discovery and Validation ---
    - name: Find all available environments
      ansible.builtin.find:
        paths: "{{ environments_dir }}"
        file_type: directory
        excludes: ".*"
      register: all_environments

    - name: Set environment list - Auto-discover all environments
      ansible.builtin.set_fact:
        environment_list: "{{ all_environments.files | map(attribute='path') | map('basename') | list | sort }}"

    - name: Debug discovered environment list
      ansible.builtin.debug:
        msg: "Environments discovered for build: {{ environment_list }}"

    - name: Check for execution-environment.yml in each environment
      ansible.builtin.stat:
        path: "{{ environments_dir }}/{{ item }}/execution-environment.yml"
      register: ee_yml_check
      loop: "{{ environment_list }}"

    - name: Fail if execution-environment.yml is missing
      ansible.builtin.fail:
        msg: "Missing execution-environment.yml in {{ environments_dir }}/{{ item.item }}"
      loop: "{{ ee_yml_check.results }}"
      when: not item.stat.exists
      loop_control:
        label: "{{ item.item }}"

    # --- Build Context Preparation ---
    - name: Remove contest/ folders in each environment for clean build
      become: true
      ansible.builtin.file:
        path: "{{ environments_dir }}/{{ item }}/contest"
        state: absent
      loop: "{{ environment_list | default([]) }}"
      loop_control:
        label: "{{ item }}"
      failed_when: false

    - name: Prepare /tmp build context for each environment
      ansible.builtin.shell: |
        rm -rf /tmp/ee-build-{{ item }}
        mkdir -p /tmp/ee-build-{{ item }}
        cp -a {{ environments_dir }}/{{ item }}/* /tmp/ee-build-{{ item }}/
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"
      changed_when: true
      failed_when: false

    - name: Copy ansible.cfg template to build context for each environment
      ansible.builtin.template:
        src: "templates/ansible.cfg.j2"
        dest: "/tmp/ee-build-{{ item }}/ansible.cfg"
        mode: '0644'
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"
      failed_when: false

    # --- Build Logic ---
    - name: Show build command and PATH for each environment
      ansible.builtin.shell: |
        set -o pipefail
        echo "PATH before build: $PATH"
        echo "Building environment: {{ item }}"
        echo "PATH: $PATH"
        echo "Building: {{ item }}"
        echo "Command: ansible-builder build --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \\"
        echo "         --container-runtime {{ container_runtime | default('podman') }} \\"
        echo "         --file /tmp/ee-build-{{ item }}/execution-environment.yml \\"
        echo "         --tag {{ item }}:latest \\"
        echo "         --verbosity 1"
      environment:
        PATH: "{{ lookup('env', 'HOME') }}/.local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ lookup('env', 'PATH') }}"
      register: debug_build_env
      loop: "{{ environment_list }}"
      changed_when: false
      failed_when: false

    - name: Get checksum of execution-environment.yml
      ansible.builtin.stat:
        path: "/tmp/ee-build-{{ item }}/execution-environment.yml"
        checksum_algorithm: sha1
      register: ee_yml_stat
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"

    - name: Get last build checksum for each environment
      ansible.builtin.stat:
        path: "/tmp/ee-build-{{ item }}/.last_build_checksum"
      register: last_build_checksum_stat
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"

    - name: Debug checksum comparison for each environment
      ansible.builtin.debug:
        msg: |
          ENV: {{ item }}
          Current checksum: {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Last build checksum: {{
            last_build_checksum_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Will build: {{
            (
              ee_yml_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            ) != (
              last_build_checksum_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            )
          }}
      loop: "{{ environment_list }}"

    - name: Build execution environments in /tmp
      ansible.builtin.shell: |
        ansible-builder build \
          --prune \
          --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \
          --container-runtime {{ container_runtime | default('podman') }} \
          --file /tmp/ee-build-{{ item }}/execution-environment.yml \
          --tag {{ item }}:latest \
          --verbosity 1
      args:
        chdir: "/tmp/ee-build-{{ item }}"
      environment:
        PATH: "{{ lookup('env', 'HOME') }}/.local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ lookup('env', 'PATH') }}"
      loop: "{{ environment_list }}"
      register: build_results
      when: >
        (
          ee_yml_stat.results
            | selectattr('item', 'equalto', item)
            | map(attribute='stat.checksum')
            | first | default('')
        ) != (
          last_build_checksum_stat.results
            | selectattr('item', 'equalto', item)
            | map(attribute='stat.checksum')
            | first | default('')
        )
      changed_when: true
      failed_when: false
      notify: Save new checksum after build

    - name: Display build results
      ansible.builtin.debug:
        msg: |
          Build result for {{ item.item }}:
            rc: {{ item.rc }}
            stdout: {{ item.stdout }}
            stderr: {{ item.stderr }}
      loop: "{{ build_results.results }}"

  handlers:
    - name: Save new checksum after build
      ansible.builtin.copy:
        dest: "/tmp/ee-build-{{ item }}/.last_build_checksum"
        content: >-
          {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
        mode: '0644'
      loop: "{{ environment_list }}"
      when: >-
        build_results.results
          | selectattr('item', 'equalto', item)
          | map(attribute='changed')
          | first | default(false)
      failed_when: false

    - name: Debug checksum comparison for each environment
      ansible.builtin.debug:
        msg: |
          ENV: {{ item }}
          Current checksum: {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Last build checksum: {{
            last_build_checksum_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Will build: {{
            (
              ee_yml_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            ) != (
              last_build_checksum_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            )
          }}
      loop: "{{ environment_list }}"

    # Ensure user is allowed to use user namespaces (for rootless Podman)
    - name: Ensure user.max_user_namespaces is set high enough
      become: true
      ansible.builtin.sysctl:
        name: user.max_user_namespaces
        value: '28633'
        sysctl_set: yes
        state: present
        reload: yes
      failed_when: false

    - name: Detect if running in Automation Platform WebUI
      set_fact:
        running_in_webui: "{{ (ansible_env.AWX_TASK_ID is defined) or (ansible_env.ANSIBLE_CONTROLLER_HOST is defined) }}"

    - name: Prompt for Red Hat credentials token
      ansible.builtin.vars_prompt:
        name: rh_credentials_token
        prompt: "Enter your Red Hat Automation Hub token"
        private: yes
      when: not running_in_webui

    - name: Prompt for Red Hat CDN username
      ansible.builtin.vars_prompt:
        name: redhat_cdn_username
        prompt: "Enter your Red Hat CDN username"
        private: no
      when: not running_in_webui

    - name: Prompt for Red Hat CDN password
      ansible.builtin.vars_prompt:
        name: redhat_cdn_password
        prompt: "Enter your Red Hat CDN password"
        private: yes
      when: not running_in_webui

    - name: Ensure ~/.ansible/conf directory exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ansible/conf"
        state: directory
        mode: '0700'
      when: not running_in_webui

    - name: Write secrets to ~/.ansible/conf/env.conf
      ansible.builtin.copy:
        dest: "{{ lookup('env', 'HOME') }}/.ansible/conf/env.conf"
        content: |
          RH_CREDENTIALS_TOKEN={{ rh_credentials_token }}
          REDHAT_CDN_USERNAME={{ redhat_cdn_username }}
          REDHAT_CDN_PASSWORD={{ redhat_cdn_password }}
        mode: '0600'
      when: not running_in_webui

