- name: Build execution environments for RHEL
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Find directories in environments
      find:
        paths: "{{ playbook_dir }}/environments"
        file_type: directory
      register: env_dirs

    - name: Debug env_dirs
      debug:
        var: env_dirs.files

    - name: Identify directories containing required files
      set_fact:
        valid_dirs: |
          {% set my_valid_dirs = [] %}
          {% for dir_item in env_dirs.files %}
            {# Ensure item is a directory (already filtered by find) and path contains 'rhel' #}
            {% if 'rhel' in dir_item.path %}
              {# Construct full paths to the required files #}
              {% set ee_file = dir_item.path ~ '/execution-environment.yml' %}
              {% set req_yml_file = dir_item.path ~ '/requirements.yml' %}
              {% set req_txt_file = dir_item.path ~ '/requirements.txt' %}
              {% set bindep_file = dir_item.path ~ '/bindep.txt' %}

              {# Check if all required files exist in the directory #}
              {% if ee_file is exists and
                    req_yml_file is exists and
                    req_txt_file is exists and
                    bindep_file is exists %}
                {% set _ = my_valid_dirs.append(dir_item) %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ my_valid_dirs }}

    - name: Display valid directories before building
      debug:
        var: valid_dirs | from_yaml

    - name: DEBUG - Check current working directory before ansible-builder
      command: pwd
      args:
        chdir: "{{ item.path }}"
      loop: "{{ valid_dirs | from_yaml }}"
      register: pwd_check_results
      ignore_errors: true # Continue even if this debug step fails

    - name: DEBUG - Display pwd results
      debug:
        var: pwd_check_results.results
      when: pwd_check_results is defined

    - name: Run ansible-builder in each valid directory
      command: /app/bin/ansible-builder build --prune -v 3 --tag "{{ item.path | basename }}" --container-runtime podman
      args:
        chdir: "{{ item.path }}"
      loop: "{{ valid_dirs | from_yaml }}"
      
    - name: Find context directories created by ansible-builder
      find:
        paths: "{{ item.path }}"
        patterns: ["context", "_build"]
        file_type: directory
      loop: "{{ valid_dirs | from_yaml }}"
      register: context_dirs
      
    - name: Remove context directories
      file:
        path: "{{ item.path }}/context"
        state: absent
      loop: "{{ valid_dirs | from_yaml }}"

    - name: Remove _build directories
      file:
        path: "{{ item.path }}/_build"
        state: absent
      loop: "{{ valid_dirs | from_yaml }}"
