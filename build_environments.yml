---
- name: Build Execution Environments
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    environments_dir: "{{ playbook_dir }}/environments"

  vars_prompt:
    - name: rh_credentials_token
      prompt: "Enter your Red Hat Automation Hub token"
      private: yes
    - name: redhat_cdn_username
      prompt: "Enter your Red Hat CDN username"
      private: no
    - name: redhat_cdn_password
      prompt: "Enter your Red Hat CDN password"
      private: yes

  pre_tasks:
    - name: Ensure user.max_user_namespaces is set high enough
      become: true
      ansible.posix.sysctl:
        name: user.max_user_namespaces
        value: '28633'
        sysctl_set: yes
        state: present
        reload: yes
      failed_when: false

    - name: Detect if running in Automation Platform WebUI
      set_fact:
        running_in_webui: "{{ (ansible_env.AWX_TASK_ID is defined) or (ansible_env.ANSIBLE_CONTROLLER_HOST is defined) }}"

    - name: Ensure ~/.ansible/conf directory exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ansible/conf"
        state: directory
        mode: '0700'
      when: not running_in_webui

    - name: Write secrets to ~/.ansible/conf/env.conf
      ansible.builtin.copy:
        dest: "{{ lookup('env', 'HOME') }}/.ansible/conf/env.conf"
        content: |
          RH_CREDENTIALS_TOKEN={{ rh_credentials_token }}
          REDHAT_CDN_USERNAME={{ redhat_cdn_username }}
          REDHAT_CDN_PASSWORD={{ redhat_cdn_password }}
        mode: '0600'
      when: not running_in_webui

  tasks:
    # --- Environment Discovery and Validation ---
    - name: Find all available environments
      ansible.builtin.find:
        paths: "{{ environments_dir }}"
        file_type: directory
        excludes: ".*"
      register: all_environments

    - name: Set environment list - Auto-discover all environments
      ansible.builtin.set_fact:
        environment_list: "{{ all_environments.files | map(attribute='path') | map('basename') | list | sort }}"

    - name: Debug discovered environment list
      ansible.builtin.debug:
        msg: "Environments discovered for build: {{ environment_list }}"

    - name: Check for execution-environment.yml in each environment
      ansible.builtin.stat:
        path: "{{ environments_dir }}/{{ item }}/execution-environment.yml"
      register: ee_yml_check
      loop: "{{ environment_list }}"

    - name: Fail if execution-environment.yml is missing
      ansible.builtin.fail:
        msg: "Missing execution-environment.yml in {{ environments_dir }}/{{ item.item }}"
      loop: "{{ ee_yml_check.results }}"
      when: not item.stat.exists
      loop_control:
        label: "{{ item.item }}"

    # --- Build Context Preparation ---
    - name: Remove contest/ folders in each environment for clean build
      become: true
      ansible.builtin.file:
        path: "{{ environments_dir }}/{{ item }}/contest"
        state: absent
      loop: "{{ environment_list | default([]) }}"
      loop_control:
        label: "{{ item }}"
      failed_when: false

    - name: Prepare /tmp build context for each environment
      ansible.builtin.shell: |
        rm -rf /tmp/ee-build-{{ item }}
        mkdir -p /tmp/ee-build-{{ item }}
        cp -a {{ environments_dir }}/{{ item }}/* /tmp/ee-build-{{ item }}/
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"
      changed_when: true
      failed_when: false

    - name: Copy ansible.cfg template to build context for each environment
      ansible.builtin.template:
        src: "templates/ansible.cfg.j2"
        dest: "/tmp/ee-build-{{ item }}/ansible.cfg"
        mode: '0644'
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"
      failed_when: false

    # --- Build Logic ---
    - name: Show build command and PATH for each environment
      ansible.builtin.shell: |
        set -o pipefail
        echo "PATH before build: $PATH"
        echo "Building environment: {{ item }}"
        echo "PATH: $PATH"
        echo "Building: {{ item }}"
        echo "Command: ansible-builder build --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \\"
        echo "         --container-runtime {{ container_runtime | default('podman') }} \\"
        echo "         --file /tmp/ee-build-{{ item }}/execution-environment.yml \\"
        echo "         --tag {{ item }}:latest \\"
        echo "         --verbosity 1"
      environment:
        PATH: "{{ lookup('env', 'HOME') }}/.local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ lookup('env', 'PATH') }}"
      register: debug_build_env
      loop: "{{ environment_list }}"
      changed_when: false
      failed_when: false

    - name: Get checksum of execution-environment.yml
      ansible.builtin.stat:
        path: "/tmp/ee-build-{{ item }}/execution-environment.yml"
        checksum_algorithm: sha1
      register: ee_yml_stat
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"

    - name: Get last build checksum for each environment
      ansible.builtin.stat:
        path: "/tmp/ee-build-{{ item }}/.last_build_checksum"
      register: last_build_checksum_stat
      loop: "{{ environment_list }}"
      loop_control:
        label: "{{ item }}"

    - name: Debug checksum comparison for each environment
      ansible.builtin.debug:
        msg: |
          ENV: {{ item }}
          Current checksum: {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Last build checksum: {{
            last_build_checksum_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Will build: {{
            (
              ee_yml_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            ) != (
              last_build_checksum_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            )
          }}
      loop: "{{ environment_list }}"

    - name: Build execution environments in /tmp
      ansible.builtin.shell: |
        ansible-builder build \
          --prune \
          --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \
          --container-runtime {{ container_runtime | default('podman') }} \
          --file /tmp/ee-build-{{ item }}/execution-environment.yml \
          --tag {{ item }}:latest \
          --verbosity 1
      args:
        chdir: "/tmp/ee-build-{{ item }}"
      environment:
        PATH: "{{ lookup('env', 'HOME') }}/.local/bin:/usr/bin:/bin:/usr/sbin:/sbin:{{ lookup('env', 'PATH') }}"
      loop: "{{ environment_list }}"
      register: build_results
      when: >
        (
          ee_yml_stat.results
            | selectattr('item', 'equalto', item)
            | map(attribute='stat.checksum')
            | first | default('')
        ) != (
          last_build_checksum_stat.results
            | selectattr('item', 'equalto', item)
            | map(attribute='stat.checksum')
            | first | default('')
        )
      changed_when: true
      failed_when: false
      notify: Save new checksum after build

    - name: Display build results
      ansible.builtin.debug:
        msg: |
          Build result for {{ item.item }}:
            rc: {{ item.rc }}
            stdout: {{ item.stdout }}
            stderr: {{ item.stderr }}
      loop: "{{ build_results.results }}"

  handlers:
    - name: Save new checksum after build
      ansible.builtin.copy:
        dest: "/tmp/ee-build-{{ item }}/.last_build_checksum"
        content: >-
          {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
        mode: '0644'
      loop: "{{ environment_list }}"
      when: >-
        build_results.results
          | selectattr('item', 'equalto', item)
          | map(attribute='changed')
          | first | default(false)
      failed_when: false

    - name: Debug checksum comparison for each environment
      ansible.builtin.debug:
        msg: |
          ENV: {{ item }}
          Current checksum: {{
            ee_yml_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Last build checksum: {{
            last_build_checksum_stat.results
              | selectattr('item', 'equalto', item)
              | map(attribute='stat.checksum')
              | first | default('')
          }}
          Will build: {{
            (
              ee_yml_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            ) != (
              last_build_checksum_stat.results
                | selectattr('item', 'equalto', item)
                | map(attribute='stat.checksum')
                | first | default('')
            )
          }}
      loop: "{{ environment_list }}"



