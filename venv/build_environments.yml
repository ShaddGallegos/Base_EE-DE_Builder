---
- name: Build Execution Environments
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    # Directory containing execution environments
    environments_dir: "{{ playbook_dir }}/environments"
    
  tasks:
    # NEW: Ensure container runtimes are installed
    - name: Install podman
      ansible.builtin.dnf:
        name:
          - podman
          - gnome-terminal
          - tmux
          - terminator
          - podman-docker
          - podman-compose
        state: present
      become: true

    - name: Try to install docker (ignore if not available)
      ansible.builtin.dnf:
        name:
          - docker
          - gnome-terminal
          - tmux
          - terminator
          - podman-docker
          - podman-compose
        state: present
      become: true
      ignore_errors: true

    - name: Check if docker service exists
      ansible.builtin.command: systemctl list-unit-files docker.service
      register: docker_service_check
      ignore_errors: true
      changed_when: false

    - name: Enable and start docker service (if available)
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started
      become: true
      when: docker_service_check.rc == 0

    - name: Add current user to docker group (if docker is available)
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true
      when: docker_service_check.rc == 0

    # Prompt for Red Hat CDN credentials and login to registry
    - name: Prompt for Red Hat CDN username
      ansible.builtin.pause:
        prompt: "Enter your Red Hat Customer Portal username"
        echo: true
      register: cdn_username

    - name: Prompt for Red Hat CDN password
      ansible.builtin.pause:
        prompt: "Enter your Red Hat Customer Portal password"
        echo: false
      register: cdn_password

    - name: Login to Red Hat registry with podman
      ansible.builtin.command: >
        podman login registry.redhat.io 
        --username {{ cdn_username.user_input }} 
        --password {{ cdn_password.user_input }}
      register: podman_login_result
      ignore_errors: true

    - name: Display login result
      ansible.builtin.debug:
        msg: "{{ 'Successfully logged into Red Hat registry' if podman_login_result.rc == 0 else 'Failed to login to Red Hat registry: ' + podman_login_result.stderr }}"

    # NEW: Handle selected environments logic
    - name: Find all available environments (when none selected)
      ansible.builtin.find:
        paths: "{{ environments_dir }}"
        file_type: directory
        excludes: ".*"
      register: all_environments
      when: selected_environments is not defined or selected_environments | length == 0

    - name: Set environment list - Auto-discover all environments  
      ansible.builtin.set_fact:
        environment_list: "{{ all_environments.files | map(attribute='path') | map('basename') | reject('match', '^base_environment_definition_.*') | list | sort }}"
      when: selected_environments is not defined or selected_environments | length == 0

    - name: Set environment list - Use selected environments
      ansible.builtin.set_fact:
        environment_list: "{{ selected_environments }}"
      when: selected_environments is defined and selected_environments | length > 0

    - name: Filter out documentation environments from selected list
      ansible.builtin.set_fact:
        environment_list: "{{ environment_list | reject('match', '^base_environment_definition_.*') | list }}"
      when: selected_environments is defined and selected_environments | length > 0

    - name: Warn about skipped documentation environments
      ansible.builtin.debug:
        msg: "SKIPPING documentation environment: {{ item }} (base_environment_definition files are for documentation only)"
      loop: "{{ selected_environments | default([]) }}"
      when: 
        - selected_environments is defined
        - item is match('^base_environment_definition_.*')

    # NEW: Validate selected environments exist
    - name: Validate selected environments exist
      ansible.builtin.stat:
        path: "{{ environments_dir }}/{{ item }}"
      register: env_check
      loop: "{{ environment_list }}"
      when: selected_environments is defined and selected_environments | length > 0

    - name: Fail if selected environment doesn't exist
      ansible.builtin.fail:
        msg: "Environment '{{ item.item }}' not found in {{ environments_dir }}"
      loop: "{{ env_check.results }}"
      when: 
        - selected_environments is defined and selected_environments | length > 0
        - not item.stat.exists
      loop_control:
        label: "{{ item.item }}"

    # Launch monitoring terminal with tmux split panes
    - name: Copy podman monitor script to /tmp for tmux session
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/scripts/monitor_script.sh"
        dest: /tmp/monitor_script.sh
        mode: '0755'
        
    - name: Copy ASCII art file to /tmp for the monitor display
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/Images/asciiable.txt"
        dest: /tmp/asciiable.txt
        mode: '0644'

    - name: Launch tmux session with podman monitoring split in visible terminal
      ansible.builtin.shell: >
        nohup bash {{ playbook_dir }}/scripts/launch_tmux_monitor.sh > /tmp/tmux_launch.log 2>&1 &
      register: tmux_launch
      ignore_errors: true

    - name: Wait for terminal to launch
      ansible.builtin.pause:
        seconds: 3
        prompt: "Launching monitoring terminal... (will continue automatically)"
      
    - name: Wait briefly to ensure terminal has time to launch
      ansible.builtin.pause:
        seconds: 3
        prompt: "Launching monitoring terminal... (will continue automatically)"

    # NEW: Try building with podman first, then fallback to docker
    - name: Clean podman system before builds
      ansible.builtin.shell: |
        podman image rm $(podman images --filter dangling=true --quiet)
      ignore_errors: true

    # Prepare special environments that need fixes
    - name: Filter requirements.txt for rhel-8-devtools (remove boto3/botocore)
      ansible.builtin.shell: |
        cd "{{ environments_dir }}/{{ item }}"
        if [ -f "requirements.txt" ]; then
          echo "# Original requirements file filtered to remove problematic packages" > requirements.txt.new
          echo "# The following packages are excluded: boto3, botocore, s3transfer" >> requirements.txt.new
          echo "# These packages are already installed via RPM in the base image" >> requirements.txt.new
          echo "" >> requirements.txt.new
          grep -v -E 'boto3|botocore|s3transfer' requirements.txt >> requirements.txt.new
          cp requirements.txt requirements.txt.original
          cp requirements.txt.new requirements.txt
          rm -f requirements.txt.new
        fi
      when: item == "rhel-8-devtools"
      loop: "{{ environment_list }}"
      ignore_errors: true

    - name: Create pip.conf for rhel-8-devtools environment
      ansible.builtin.copy:
        dest: "{{ environments_dir }}/{{ item }}/pip.conf"
        content: |
          [global]
          break-system-packages = true
          ignore-installed = botocore boto3 s3transfer systemd-python packaging PyYAML jmespath python-dateutil six
          no-cache-dir = true
          disable-pip-version-check = true
          
          [install]
          no-deps = boto3 botocore s3transfer
        mode: '0644'
      when: item == "rhel-8-devtools"
      loop: "{{ environment_list }}"
      
    - name: Update constraints.txt for rhel-8-devtools environment
      ansible.builtin.copy:
        dest: "{{ environments_dir }}/{{ item }}/constraints.txt"
        content: |
          # Exclude problematic packages that are installed by RPM
          # These constraints ensure pip won't attempt to install or upgrade these packages
          systemd-python==0
          packaging==0
          botocore==0
          boto3==0
          s3transfer==0
          jmespath==0
          python-dateutil==0
          PyYAML==0
          six==0
        mode: '0644'
      when: item == "rhel-8-devtools"
      loop: "{{ environment_list }}"
      
    - name: Update execution-environment.yml to include pip.conf in rhel-8-devtools
      ansible.builtin.lineinfile:
        path: "{{ environments_dir }}/{{ item }}/execution-environment.yml"
        insertafter: "  - src: \"./constraints.txt\"\n    dest: constraints.txt"
        line: "  - src: \"./pip.conf\"\n    dest: pip.conf"
        state: present
      when: item == "rhel-8-devtools" 
      loop: "{{ environment_list }}"
      
    - name: Update execution-environment.yml prepend_builder section in rhel-8-devtools
      ansible.builtin.replace:
        path: "{{ environments_dir }}/{{ item }}/execution-environment.yml"
        regexp: '    # Exclude problematic RPM-installed packages from pip''s consideration.*?export PIP_CONFIG_FILE=/usr/local/pip/pip.conf'' >> /etc/profile.d/python_user_base.sh'
        replace: |
            # Set up pip configuration to exclude problematic RPM-installed packages
            RUN mkdir -p /usr/local/pip && \
                cp /tmp/pip.conf /usr/local/pip/pip.conf && \
                echo "export PYTHONUSERBASE=/usr/local" > /etc/profile.d/python_user_base.sh && \
                echo "export PIP_CONFIG_FILE=/usr/local/pip/pip.conf" >> /etc/profile.d/python_user_base.sh && \
                echo "export PIP_CONSTRAINT=/tmp/constraints.txt" >> /etc/profile.d/python_user_base.sh
      when: item == "rhel-8-devtools"  
      loop: "{{ environment_list }}"

    - name: Build execution environments with podman (sequential to avoid resource issues)
      ansible.builtin.shell: |
        set -e
        cd "{{ environments_dir }}/{{ item }}"
        
        echo "=========================="
        echo "Building {{ item }}..."
        echo "=========================="
        echo "Environment: {{ item }}"
        echo "Start time: $(date)"
        echo "=========================="
        
        # Clean up any existing context
        sudo rm -rf context/ || rm -rf context/ || true
        
        # Wait a bit to avoid race conditions
        sleep 5
        
        # Set build arguments based on environment
        EXTRA_ARGS=""
        if [ "{{ item }}" == "rhel-8-devtools" ]; then
          echo "Adding special build arguments for rhel-8-devtools..."
          EXTRA_ARGS="--build-arg PIP_OPTS=\"--constraint constraints.txt --no-cache-dir --ignore-installed --config pip.conf\" --build-arg PIP_CONFIG_FILE=/tmp/pip.conf --build-arg PIP_CONSTRAINT=/tmp/constraints.txt --build-arg PIP_BREAK_SYSTEM_PACKAGES=1"
          # Set environment variables for pip
          export PIP_BREAK_SYSTEM_PACKAGES=1
          export PIP_CONFIG_FILE="$(pwd)/pip.conf"
          export PIP_CONSTRAINT="$(pwd)/constraints.txt"
        fi
        
        # Build with real-time output and increased verbosity
        timeout 1800 /usr/local/bin/ansible-builder build \
          --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \
          --container-runtime podman \
          --file execution-environment.yml \
          --prune \
          --tag {{ item }}:{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }} \
          --verbosity 3 \
          --build-arg BUILDAH_FORMAT=docker \
          --build-arg MAX_JOBS=2 \
          $EXTRA_ARGS \
          --no-cache \
          2>&1 | while IFS= read -r line; do
            echo "[$(date '+%H:%M:%S')] $line"
          done
        
        build_exit_code=${PIPESTATUS[0]}
        if [ $build_exit_code -ne 0 ]; then
          echo "=========================="
          echo "BUILD FAILED for {{ item }} (rootless)"
          echo "Exit code: $build_exit_code"
          echo "Trying rootful podman..."
          echo "=========================="
          
          # Try with rootful podman
          # Set rootful build arguments based on environment
          ROOTFUL_EXTRA_ARGS=""
          if [ "{{ item }}" == "rhel-8-devtools" ]; then
            echo "Adding special build arguments for rhel-8-devtools (rootful)..."
            ROOTFUL_EXTRA_ARGS="--build-arg PIP_OPTS=\"--constraint constraints.txt --no-cache-dir --ignore-installed --config pip.conf\" --build-arg PIP_CONFIG_FILE=/tmp/pip.conf --build-arg PIP_CONSTRAINT=/tmp/constraints.txt --build-arg PIP_BREAK_SYSTEM_PACKAGES=1"
            # Set environment variables for pip
            export PIP_BREAK_SYSTEM_PACKAGES=1
            export PIP_CONFIG_FILE="$(pwd)/pip.conf"
            export PIP_CONSTRAINT="$(pwd)/constraints.txt"
          fi
          
          sudo timeout 1800 /usr/local/bin/ansible-builder build \
            --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \
            --container-runtime podman \
            --file execution-environment.yml \
            --prune \
            --tag {{ item }}:{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }} \
            --verbosity 3 \
            --build-arg BUILDAH_FORMAT=docker \
            --build-arg MAX_JOBS=2 \
            $ROOTFUL_EXTRA_ARGS \
            --no-cache \
            2>&1 | while IFS= read -r line; do
              echo "[$(date '+%H:%M:%S')] $line"
            done
          
          rootful_exit_code=${PIPESTATUS[0]}
          if [ $rootful_exit_code -ne 0 ]; then
            echo "=========================="
            echo "ROOTFUL BUILD ALSO FAILED for {{ item }}"
            echo "Exit code: $rootful_exit_code"
            echo "End time: $(date)"
            echo "=========================="
            exit $rootful_exit_code
          fi
        fi
        
        echo "=========================="
        echo "Successfully built {{ item }}"
        echo "End time: $(date)"
        echo "=========================="
        
        # Clean up context after successful build  
        sudo rm -rf context/ || rm -rf context/ || true
        
        # Force garbage collection
        podman system prune -f || true
      loop: "{{ environment_list }}"
      register: build_results_podman
      ignore_errors: true
      retries: 2
      delay: 30
      throttle: 1

    # Fallback: Build with docker if podman failed (and docker is available)
    - name: Build execution environments with docker (fallback)
      ansible.builtin.shell: |
        set -e
        cd "{{ environments_dir }}/{{ item }}"
        
        echo "=========================="
        echo "FALLBACK: Building {{ item }} with docker..."
        echo "=========================="
        echo "Environment: {{ item }}"
        echo "Start time: $(date)"
        echo "=========================="
        
        # Clean up any existing context
        rm -rf context/ || true
        
        # Set docker build arguments based on environment
        DOCKER_EXTRA_ARGS=""
        if [ "{{ item }}" == "rhel-8-devtools" ]; then
          echo "Adding special build arguments for rhel-8-devtools (docker)..."
          DOCKER_EXTRA_ARGS="--build-arg PIP_OPTS=\"--constraint constraints.txt --no-cache-dir --ignore-installed --config pip.conf\" --build-arg PIP_CONFIG_FILE=/tmp/pip.conf --build-arg PIP_CONSTRAINT=/tmp/constraints.txt --build-arg PIP_BREAK_SYSTEM_PACKAGES=1"
          # Set environment variables for pip
          export PIP_BREAK_SYSTEM_PACKAGES=1
          export PIP_CONFIG_FILE="$(pwd)/pip.conf"
          export PIP_CONSTRAINT="$(pwd)/constraints.txt"
        fi
        
        # Build with real-time output and increased verbosity
        timeout 1800 /usr/local/bin/ansible-builder build \
          --build-arg ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=--ignore-certs \
          --container-runtime docker \
          --file execution-environment.yml \
          --tag {{ item }}:{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }} \
          --verbosity 3 \
          $DOCKER_EXTRA_ARGS \
          --no-cache \
          2>&1 | while IFS= read -r line; do
            echo "[$(date '+%H:%M:%S')] $line"
          done
        
        build_exit_code=${PIPESTATUS[0]}
        if [ $build_exit_code -ne 0 ]; then
          echo "=========================="
          echo "DOCKER BUILD FAILED for {{ item }}"
          echo "Exit code: $build_exit_code"
          echo "End time: $(date)"
          echo "=========================="
          exit $build_exit_code
        fi
        
        echo "=========================="
        echo "Successfully built {{ item }} with docker"
        echo "End time: $(date)"
        echo "=========================="
          
        # Clean up context after build
        rm -rf context/ || true
      loop: "{{ environment_list }}"
      register: build_results_docker
      when: 
        - build_results_podman.results[ansible_loop.index0].rc != 0
        - docker_service_check.rc == 0
      ignore_errors: true
      loop_control:
        extended: true

    # Clean up dangling images and system resources after builds
    - name: Aggressive cleanup of podman resources
      ansible.builtin.shell: |
        echo "Starting comprehensive cleanup..."
        
        # Remove all dangling images
        dangling_images=$(podman images --filter dangling=true --quiet)
        if [ -n "$dangling_images" ]; then
          echo "Found dangling images, removing..."
          for image in $dangling_images; do
            podman image rm $image 2>/dev/null && echo "Deleted: $image" || echo "Skipped: $image (in use)"
          done
        else
          echo "No dangling images to remove"
        fi
        
        # Clean up build cache and temporary files
        podman system prune -f --volumes || true
        
        # Reset podman if needed (aggressive cleanup)
        if [ "$(podman images --quiet | wc -l)" -gt 50 ]; then
          echo "Too many images, performing system reset..."
          podman system reset --force || true
        fi
        
        echo "Cleanup completed"
      ignore_errors: true
      register: cleanup_result

    - name: Display cleanup results
      ansible.builtin.debug:
        msg: "{{ cleanup_result.stdout_lines | default(['No cleanup output']) }}"

    # Clean up context folders created by ansible-builder
    - name: Remove context folders from environment directories
      ansible.builtin.file:
        path: "{{ environments_dir }}/{{ item }}/context"
        state: absent
      loop: "{{ environment_list }}"
      ignore_errors: true

    - name: Display context cleanup message
      ansible.builtin.debug:
        msg: "Cleaned up context folders from all environment directories"

    # Set final build results for summary
    - name: Set final build results
      ansible.builtin.set_fact:
        build_results: "{{ build_results_podman if build_results_podman.results[0].rc == 0 else build_results_docker }}"
        successful_runtime: "{{ 'podman' if build_results_podman.results[0].rc == 0 else 'docker' }}"

    # Display build summary with runtime used
    - name: Display build results
      ansible.builtin.debug:
        msg: "Built {{ environment_list | length }} environments using {{ successful_runtime }}: {{ environment_list | join(', ') }}"

    # Report any failures
    - name: Report build failures
      ansible.builtin.debug:
        msg: "FAILED to build {{ item.item }} with both podman and docker"
      loop: "{{ build_results_docker.results | default([]) }}"
      when: 
        - build_results_docker is defined
        - item is defined
        - item.rc is defined
        - item.rc != 0
        - build_results_podman.results[ansible_loop.index0] is defined
        - build_results_podman.results[ansible_loop.index0].rc != 0
