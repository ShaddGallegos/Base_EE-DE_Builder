---
- name: Pull Base Images Required for Builds
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    environments_dir: "{{ playbook_dir }}/environments"
    
  tasks:
    - name: Get list of environment directories
      ansible.builtin.find:
        paths: "{{ environments_dir }}"
        file_type: directory
        excludes: ".*,base_environment_definition_*"
      register: environment_dirs
      
    - name: Set environments list
      ansible.builtin.set_fact:
        environments: "{{ environment_dirs.files | map(attribute='path') | map('basename') | list }}"
        
    - name: Display available environments
      ansible.builtin.debug:
        msg: "Found environments: {{ environments | join(', ') }}"
      
    - name: Extract base image information from execution-environment.yml files
      ansible.builtin.shell: |
        grep -A 2 "base_image:" "{{ environments_dir }}/{{ item }}/execution-environment.yml" | grep "name:" | awk -F"'" '{print $2}' || echo ""
      register: base_image_results
      ignore_errors: true
      changed_when: false
      loop: "{{ environments }}"
      
    - name: Create list of unique base images to pull
      ansible.builtin.set_fact:
        base_images_to_pull: "{{ base_image_results.results | map(attribute='stdout') | reject('equalto', '') | list | unique }}"
        
    - name: Display base images to pull
      ansible.builtin.debug:
        msg: "Will pull the following base images: {{ base_images_to_pull | join(', ') }}"
      when: base_images_to_pull | length > 0
      
    - name: Check if logged in to Red Hat registry
      ansible.builtin.shell: podman pull registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8:latest --quiet && echo "logged-in" || echo "not-logged-in"
      register: registry_login_check
      changed_when: false
      ignore_errors: true
      
    - name: Display registry login status
      ansible.builtin.debug:
        msg: "Red Hat registry login status: {{ registry_login_check.stdout }}"
      
    - name: Prompt for Red Hat registry credentials if not logged in
      block:
        - name: Prompt for Red Hat CDN username
          ansible.builtin.pause:
            prompt: "Enter your Red Hat Customer Portal username"
          register: cdn_username_input
          
        - name: Prompt for Red Hat CDN password
          ansible.builtin.pause:
            prompt: "Enter your Red Hat Customer Portal password"
            echo: no
          register: cdn_password_input
          
        - name: Attempt to log in to Red Hat registry
          ansible.builtin.shell: |
            podman login registry.redhat.io --username "{{ cdn_username_input.user_input }}" --password "{{ cdn_password_input.user_input }}"
          register: registry_login_result
          no_log: true
      when: registry_login_check.stdout == "not-logged-in"
        
    - name: Check which base images already exist locally
      ansible.builtin.shell: |
        if podman image exists {{ item }}; then
          echo "exists"
        else
          echo "missing"
        fi
      register: image_exists_check
      loop: "{{ base_images_to_pull }}"
      changed_when: false
      when: base_images_to_pull is defined and base_images_to_pull | length > 0

    - name: Create list of missing images
      ansible.builtin.set_fact:
        missing_images: "{{ base_images_to_pull | zip(image_exists_check.results | map(attribute='stdout')) | selectattr('1', 'equalto', 'missing') | map(attribute='0') | list }}"
      when: base_images_to_pull is defined and base_images_to_pull | length > 0 and image_exists_check is defined

    - name: Display images to pull
      ansible.builtin.debug:
        msg: "Need to pull {{ missing_images | length }} of {{ base_images_to_pull | length }} base images: {{ missing_images | join(', ') }}"
      when: missing_images is defined and missing_images | length > 0

    - name: Pull missing base images
      ansible.builtin.shell: |
        echo "Pulling base image {{ item }}..."
        podman pull {{ item }}
      register: pull_results
      loop: "{{ missing_images }}"
      when: missing_images is defined and missing_images | length > 0
      
    - name: Display pull results
      ansible.builtin.debug:
        msg: "{{ pull_results.results | map(attribute='stdout_lines') | list }}"
      when: pull_results is defined and pull_results.results is defined and pull_results.results | length > 0
      
    - name: Display skipped images
      ansible.builtin.debug:
        msg: "The following images were already present locally: {{ base_images_to_pull | difference(missing_images | default([])) | join(', ') }}"
      when: base_images_to_pull is defined and missing_images is defined and base_images_to_pull | difference(missing_images) | length > 0
      
    - name: Show available images
      ansible.builtin.shell: podman images
      register: image_list
      changed_when: false
      
    - name: Display available images
      ansible.builtin.debug:
        msg: "{{ image_list.stdout_lines }}"
